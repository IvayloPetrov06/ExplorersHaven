
@using Explorers_Haven.ViewModels.Main
@model OfferPageViewModel

<h1>@Model.OfferName</h1>
<img src="@Model.OfferPic" alt="@Model.OfferName">
<h1>@Model.OfferDisc</h1>
<h1>@Model.OfferRating</h1>
<label for="star5"></label>
<a asp-controller="Booking" asp-action="Book" asp-route-id="@Model.OfferId">
	<div class="rating">
		@if (Model.OfferRatingStars == 5)
		{
			<input value="5" name="rating" id="star5" type="radio" checked>
		}
		else
		{
			<input value="5" name="rating" id="star5" type="radio">
		}
		<label for="star5"></label>
		@if (Model.OfferRatingStars == 4)
		{
			<input value="4" name="rating" id="star4" type="radio" checked>
		}
		else
		{ 
			<input value="4" name="rating" id="star4" type="radio">
		}
		<label for="star4"></label>
		@if (Model.OfferRatingStars == 3)
		{
			<input value="3" name="rating" id="star3" type="radio" checked>
		}
		else
		{
			<input value="3" name="rating" id="star3" type="radio">
		}
		<label for="star3"></label>
		@if (Model.OfferRatingStars == 2)
		{
			<input value="2" name="rating" id="star2" type="radio" checked>
		}
		else
		{
			<input value="2" name="rating" id="star2" type="radio">
		}
		<label for="star2"></label>
		@if (Model.OfferRatingStars == 1)
		{
			<input value="1" name="rating" id="star1" type="radio" checked>
		}
		else
		{
			<input value="1" name="rating" id="star1" type="radio">
		}
		<label for="star1"></label>
	</div>
</a>
<h1>@Model.OfferPrice лв</h1>
<a asp-controller="Booking" asp-action="Book" asp-route-id="@Model.OfferId">Book</a>
<a asp-controller="Booking" asp-action="Cancel" asp-route-id="@Model.OfferId">Cancel</a>
<h1>@Model.StayName</h1>
<h1>@Model.StayStars</h1>
<h1>@Model.StayPrice лв</h1>
<h1>@Model.StayDisc</h1>
<img src="@Model.StayPic" alt="@Model.StayName">






@foreach (var a in Model.Activities)
{
	<h1>@a.Name</h1>
}
@foreach (var a in Model.Travels)
{
	<div class="el1">
		<h1>@a.Start</h1>
		<h1>@a.DateStart.ToString()</h1>
	</div>
	<div class="el1">
		<h1>@a.Finish</h1>
		<h1>@a.DateFinish</h1>
	</div>
	<img class="mini-icon" src="~/Images/Plane.svg" alt="Plane" />
	<h1>@a.Transport</h1>
}
<div class="comment">
	<form id="commentForm" method="POST">
		<input type="text" id="userInput" name="userInput" placeholder="Write a comment..." />
		<button type="submit">Submit</button>
	</form>
</div>

<div id="commentsSection">

	@foreach (var a in Model.Comments)
	{
		foreach (var u in Model.Users)
		{
			if (u.Id==a.UserId)
			{
				<img src="@u.ProfilePicture" class="profile-pic">
			}
		}
		<h1>@a.Content</h1>
	}
</div>


<style>
	.rating {
		display: inline-block;
	}

		.rating input {
			display: none;
		}

		.rating label {
			float: right;
			cursor: pointer;
			color: #ccc;
			transition: color 0.3s;
		}

			.rating label:before {
				content: '\2605';
				font-size: 30px;
			}

			.rating input:checked ~ label,
			.rating label:hover,
			.rating label:hover ~ label {
				color: #6f00ff;
				transition: color 0.3s;
			}

	.profile-pic {
		width: 130px;
		height: 130px;
		border-radius: 50%;
		object-fit: cover;
		border: 3px solid #1DB954;
	}
</style>

<script>
	$(document).ready( function () {
		var stars = document.querySelector(".rating").querySelectorAll("input");
		
		stars.forEach(function (star, idx) {
			star.addEventListener('click', async function () {
				const url = "/Rating/Rate/@Model.OfferId?rating=" + this.value;
				try {
					const response = await fetch(url);
					const json = await response.json();
					console.log(json);
					//alert(json.success);
				} catch (error) {
					alert("error");
				}
				
			});
		});
			document.querySelector("#commentForm").addEventListener("submit", async function (event) {
		event.preventDefault(); // Prevent form from submitting traditionally

		const comment = document.querySelector("#userInput").value;
		const offerId = @Model.OfferId; // Ensure that the OfferId is passed from the model

		const url = `/Comment/WriteComment/${offerId}?comment=${encodeURIComponent(comment)}`;

		try {
			const response = await fetch(url, {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				}
			});
			const json = await response.json();
			console.log(json);


			// Optionally, update the comments section or handle success
			if (json.success) {
			// Create a new div to hold the comment content and the profile picture
			const commentDiv = document.createElement("div");

			// Create and add the profile picture
			const profilePic = document.createElement("img");
			profilePic.src = json.profilePicture;  // Profile picture from the response
			profilePic.classList.add("profile-pic");

			// Create and add the comment content
			const commentContent = document.createElement("h1");
			commentContent.textContent = json.commentContent;  // Comment content from the response

			// Append the profile picture and comment content to the commentDiv
			commentDiv.appendChild(profilePic);
			commentDiv.appendChild(commentContent);

			// Append the new comment to the comments section
			const commentsSection = document.querySelector("#commentsSection");
			commentsSection.appendChild(commentDiv);

			// Clear the input field
			document.querySelector("#userInput").value = '';
			} else {
				alert("Failed to add comment.");
			}

		} catch (error) {
			console.error(error);
			alert("Error occurred while submitting the comment.");
		}
	});
	});
</script>