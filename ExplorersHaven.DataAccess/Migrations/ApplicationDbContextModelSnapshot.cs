// <auto-generated />
using System;
using Explorers_Haven.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Explorers_Haven.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Explorers_Haven.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("Activites");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoverImage = "https://res.cloudinary.com/dkoshuv9z/image/upload/v1741243536/Egypt_geyymk.jpg",
                            Name = "Яздене на камила",
                            OfferId = 1
                        },
                        new
                        {
                            Id = 2,
                            CoverImage = "/Images/sighteg.jpg",
                            Name = "Разглеждане на забележителности",
                            OfferId = 1
                        },
                        new
                        {
                            Id = 3,
                            CoverImage = "/Images/sightpol.jpg",
                            Name = "Разглеждане на забележителности",
                            OfferId = 2
                        },
                        new
                        {
                            Id = 4,
                            CoverImage = "/Images/sightger.jpg",
                            Name = "Разглеждане на забележителности",
                            OfferId = 3
                        },
                        new
                        {
                            Id = 5,
                            CoverImage = "/Images/archery.jpg",
                            Name = "Стрелба с лък",
                            OfferId = 3
                        },
                        new
                        {
                            Id = 6,
                            CoverImage = "/Images/sightfr.jpg",
                            Name = "Разглеждане на забележителности",
                            OfferId = 4
                        },
                        new
                        {
                            Id = 7,
                            CoverImage = "/Images/winefield.jpg",
                            Name = "Пътуване до винени региони",
                            OfferId = 4
                        });
                });

            modelBuilder.Entity("Explorers_Haven.Models.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Amenities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "/Images/parking.svg",
                            Name = "Места за паркиране"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "/Images/kitchen.svg",
                            Name = "Кухня"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "/Images/usefortheunabled.svg",
                            Name = "Подходящ за хора с увреждания"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "/Images/wifi.svg",
                            Name = "Безплатен Wifi"
                        },
                        new
                        {
                            Id = 5,
                            Icon = "/Images/familyrooms.svg",
                            Name = "Семейни стаи"
                        });
                });

            modelBuilder.Entity("Explorers_Haven.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DurationDays")
                        .HasColumnType("int");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("OfferName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("PeopleCount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("YoungOldPeopleCount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<int>("Stars")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Favorite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("OfferName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Clicks")
                        .HasColumnType("int");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DefaultRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Disc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("LastDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("MaxPeople")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("RealRating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("StayId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StayId");

                    b.HasIndex("UserId");

                    b.ToTable("Offers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackImage = "https://res.cloudinary.com/dkoshuv9z/image/upload/v1741541997/Egypt1_bzftps.avif",
                            CoverImage = "https://res.cloudinary.com/dkoshuv9z/image/upload/v1741243536/Egypt_geyymk.jpg",
                            DefaultRating = 3m,
                            Disc = "Пътуване из Египет и круиз по река Нил, обиколка на пирамидите в Гиза.",
                            Discount = 20m,
                            DurationDays = 5,
                            LastDate = new DateOnly(2025, 4, 8),
                            MaxPeople = 8m,
                            Name = "Egypt",
                            Price = 759m,
                            Rating = 3m,
                            StartDate = new DateOnly(2025, 4, 1),
                            StayId = 1
                        },
                        new
                        {
                            Id = 2,
                            BackImage = "/Images/polback.jpg",
                            CoverImage = "https://res.cloudinary.com/dkoshuv9z/image/upload/v1741243527/Poland_heknwf.jpg",
                            DefaultRating = 4m,
                            Disc = "Полша предлага комбинация от оживени градове, богата история и зашеметяваща природа. Не пропускайте да разгледате Краков и Варшава, опитайте традиционни пироги и използвайте влакове за лесно пътуване между градовете.",
                            Discount = 0m,
                            DurationDays = 7,
                            LastDate = new DateOnly(2025, 5, 1),
                            MaxPeople = 12m,
                            Name = "Полша",
                            Price = 300m,
                            Rating = 4m,
                            StartDate = new DateOnly(2025, 4, 1),
                            StayId = 2
                        },
                        new
                        {
                            Id = 3,
                            BackImage = "/Images/gerback.jpg",
                            CoverImage = "https://res.cloudinary.com/dkoshuv9z/image/upload/v1741243521/Germany_iifb9a.jpg",
                            DefaultRating = 5m,
                            Disc = "Германия съчетава модерна ефективност с дълбока история – изследвайте културата на Берлин, бирените градини на Мюнхен и приказни градове като Ротенбург.",
                            Discount = 15m,
                            DurationDays = 7,
                            LastDate = new DateOnly(2025, 6, 1),
                            MaxPeople = 16m,
                            Name = "Германия",
                            Price = 950m,
                            Rating = 5m,
                            StartDate = new DateOnly(2025, 4, 1),
                            StayId = 3
                        },
                        new
                        {
                            Id = 4,
                            BackImage = "/Images/frback.jpg",
                            CoverImage = "/Images/paris.jpg",
                            DefaultRating = 3m,
                            Disc = "Във Франция всичко е свързано с изкуство, храна и чар – Париж очарова, но не пропускайте винени региони като Бордо или лавандуловите полета на Прованс.",
                            Discount = 35m,
                            DurationDays = 6,
                            LastDate = new DateOnly(2025, 4, 8),
                            MaxPeople = 10m,
                            Name = "Франция",
                            Price = 800m,
                            Rating = 3m,
                            StartDate = new DateOnly(2025, 4, 1),
                            StayId = 4
                        });
                });

            modelBuilder.Entity("Explorers_Haven.Models.Stay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Disc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Stars")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Stays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Disc = "Този луксозен премиум ултра ол инклузив курорт в Хургада предлага само апартаменти и вили с настаняване на брега на морето с обща площ от 255 000 m2. Разполага с 1 км частен пясъчен плаж, 30 плувни басейна (9 вида), 1 основен ресторант на шведска маса, 7 а-ла-карт ресторанта, 14 бара и безплатен Wi-Fi в целия имот. Този 5-звезден хотел предлага частен плаж и кабинки до басейна при заявка.",
                            Image = "https://res.cloudinary.com/dkoshuv9z/image/upload/v1741542028/EgyptHotel_kc6xak.jpg",
                            Name = "Megawish Hotel",
                            Price = 500m,
                            Stars = 5
                        },
                        new
                        {
                            Id = 2,
                            Disc = "InterContinental Warszawa е 5-звезден хотел в центъра на Варшава, на 500 метра от централната гара на Варшава. Той разполага с луксозни климатизирани стаи и уелнес център, разположен на 43-ия и 44-ия етаж. Всички стаи в InterContinental са оборудвани с удобства за приготвяне на чай и кафе и минибар.",
                            Image = "/Images/WarsawHotel.jpg",
                            Name = "InterContinental Warsaw Hotel",
                            Price = 120m,
                            Stars = 5
                        },
                        new
                        {
                            Id = 3,
                            Disc = "Разположен в зеления квартал Lenbachgärten и близо до историческия Königsplatz, безпроблемният елегантен хотел Charles в Мюнхен е мястото, където съвременният стил среща традиционното баварско гостоприемство.",
                            Image = "/Images/gerHotel.jpg",
                            Name = "Charles Hotel",
                            Price = 500m,
                            Stars = 5
                        },
                        new
                        {
                            Id = 4,
                            Disc = "12-ти район на Париж се нуждаеше само от едно нещо, за да бъде още по-страхотен – умопомрачен разкошен бутиков хотел, покрит със зашеметяващ бар на покрива. И ние не се спираме само на най-добрите гледки към силуета на Париж. Мегаудобни легла, възглавници, подобни на облак, и артистична всекидневна са част от пакета.",
                            Image = "/Images/ParisHotel.jpg",
                            Name = "Paris Gare de Lyon hotel",
                            Price = 400m,
                            Stars = 4
                        });
                });

            modelBuilder.Entity("Explorers_Haven.Models.StayAmenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AmenityId")
                        .HasColumnType("int");

                    b.Property<int?>("StayId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AmenityId");

                    b.HasIndex("StayId");

                    b.ToTable("StayAmenity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AmenityId = 1,
                            StayId = 1
                        },
                        new
                        {
                            Id = 2,
                            AmenityId = 2,
                            StayId = 1
                        },
                        new
                        {
                            Id = 3,
                            AmenityId = 3,
                            StayId = 1
                        },
                        new
                        {
                            Id = 4,
                            AmenityId = 4,
                            StayId = 2
                        },
                        new
                        {
                            Id = 5,
                            AmenityId = 4,
                            StayId = 3
                        },
                        new
                        {
                            Id = 6,
                            AmenityId = 4,
                            StayId = 4
                        },
                        new
                        {
                            Id = 7,
                            AmenityId = 1,
                            StayId = 2
                        },
                        new
                        {
                            Id = 8,
                            AmenityId = 3,
                            StayId = 3
                        },
                        new
                        {
                            Id = 9,
                            AmenityId = 2,
                            StayId = 3
                        });
                });

            modelBuilder.Entity("Explorers_Haven.Models.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Самолет"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Влак"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ферибот"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Личен Транспорт"
                        });
                });

            modelBuilder.Entity("Explorers_Haven.Models.Travel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Arrival")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("DateFinish")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("DateStart")
                        .HasColumnType("date");

                    b.Property<int?>("DurationDays")
                        .HasColumnType("int");

                    b.Property<string>("Finish")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfferId")
                        .HasColumnType("int");

                    b.Property<string>("Start")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransportId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("TransportId");

                    b.HasIndex("UserId");

                    b.ToTable("Travels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Arrival = true,
                            DurationDays = 1,
                            Finish = "Кайро",
                            OfferId = 1,
                            Start = "София",
                            TransportId = 1
                        },
                        new
                        {
                            Id = 2,
                            Arrival = false,
                            DurationDays = 1,
                            Finish = "София",
                            OfferId = 1,
                            Start = "Кайро",
                            TransportId = 1
                        },
                        new
                        {
                            Id = 3,
                            Arrival = true,
                            DurationDays = 1,
                            Finish = "Варшава",
                            OfferId = 2,
                            Start = "София",
                            TransportId = 1
                        },
                        new
                        {
                            Id = 4,
                            Arrival = false,
                            DurationDays = 1,
                            Finish = "София",
                            OfferId = 2,
                            Start = "Варшава",
                            TransportId = 1
                        },
                        new
                        {
                            Id = 5,
                            Arrival = true,
                            DurationDays = 1,
                            Finish = "Берлин",
                            OfferId = 3,
                            Start = "София",
                            TransportId = 1
                        },
                        new
                        {
                            Id = 6,
                            Arrival = false,
                            DurationDays = 1,
                            Finish = "София",
                            OfferId = 3,
                            Start = "Берлин",
                            TransportId = 1
                        },
                        new
                        {
                            Id = 7,
                            Arrival = true,
                            DurationDays = 1,
                            Finish = "Париж",
                            OfferId = 4,
                            Start = "София",
                            TransportId = 1
                        },
                        new
                        {
                            Id = 8,
                            Arrival = false,
                            DurationDays = 1,
                            Finish = "София",
                            OfferId = 4,
                            Start = "Париж",
                            TransportId = 1
                        });
                });

            modelBuilder.Entity("Explorers_Haven.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bio")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserIdentityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserIdentityId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Explorers_Haven.Models.Activity", b =>
                {
                    b.HasOne("Explorers_Haven.Models.Offer", "Offer")
                        .WithMany("Activities")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Explorers_Haven.Models.User", "User")
                        .WithMany("Activities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Booking", b =>
                {
                    b.HasOne("Explorers_Haven.Models.Offer", "Offer")
                        .WithMany("Bookings")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Explorers_Haven.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Comment", b =>
                {
                    b.HasOne("Explorers_Haven.Models.Offer", "Offer")
                        .WithMany("Comments")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Explorers_Haven.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Favorite", b =>
                {
                    b.HasOne("Explorers_Haven.Models.Offer", "Offer")
                        .WithMany("Favorites")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Explorers_Haven.Models.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offer");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Offer", b =>
                {
                    b.HasOne("Explorers_Haven.Models.Stay", "Stay")
                        .WithMany("Offers")
                        .HasForeignKey("StayId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Explorers_Haven.Models.User", "User")
                        .WithMany("Offers")
                        .HasForeignKey("UserId");

                    b.Navigation("Stay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Stay", b =>
                {
                    b.HasOne("Explorers_Haven.Models.User", "User")
                        .WithMany("Stays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Explorers_Haven.Models.StayAmenity", b =>
                {
                    b.HasOne("Explorers_Haven.Models.Amenity", "Amenity")
                        .WithMany("StayAmenities")
                        .HasForeignKey("AmenityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Explorers_Haven.Models.Stay", "Stay")
                        .WithMany("StayAmenities")
                        .HasForeignKey("StayId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Amenity");

                    b.Navigation("Stay");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Travel", b =>
                {
                    b.HasOne("Explorers_Haven.Models.Offer", "Offer")
                        .WithMany("Travels")
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Explorers_Haven.Models.Transport", "Transport")
                        .WithMany("Travels")
                        .HasForeignKey("TransportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Explorers_Haven.Models.User", "User")
                        .WithMany("Travels")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Offer");

                    b.Navigation("Transport");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Explorers_Haven.Models.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "UserIdentity")
                        .WithOne()
                        .HasForeignKey("Explorers_Haven.Models.User", "UserIdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserIdentity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Explorers_Haven.Models.Amenity", b =>
                {
                    b.Navigation("StayAmenities");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Offer", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Bookings");

                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Travels");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Stay", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("StayAmenities");
                });

            modelBuilder.Entity("Explorers_Haven.Models.Transport", b =>
                {
                    b.Navigation("Travels");
                });

            modelBuilder.Entity("Explorers_Haven.Models.User", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Bookings");

                    b.Navigation("Comments");

                    b.Navigation("Favorites");

                    b.Navigation("Offers");

                    b.Navigation("Stays");

                    b.Navigation("Travels");
                });
#pragma warning restore 612, 618
        }
    }
}
